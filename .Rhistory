res = cor(totacc, fatacc, t, unem)
round(res, 2)
install.packages("corrplot")
library(corrplot)
install.packages("corrplot")
install.packages("corrplot")
stat.desc(scores, basic=F)
attach(dt)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
#statisticas descritivas
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
install.packages("pastecs")
library(pastecs)
getwd()  #retorna a pasta diretório
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
#statisticas descritivas
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
mr_02 = lm(totacc.ts ~ fatacc.ts + unem.ts)
summary(mr_02)
mr_11 = dynlm(log(totacc.ts) ~ t + feb + mar + apr + may + jun + jul + aug + sep + oct + nov + dec +
wkends + unem + spdlaw + beltlaw)
mr_10 = dynlm(log(totacc.ts) ~ t  + feb + mar + apr + may + jun + jul + aug + sep + oct + nov + dec)
summary(mr_10)
install.packages("dynlm")
library(dynlm)
totacc.ts = ts(totacc,start=c(1981,1),end=c(1989,12),frequency=12)
fatacc.ts = ts(fatacc,start=c(1981,1),end=c(1989,12),frequency=12)
unem.ts = ts(unem,start=c(1981,1),end=c(1989,12),frequency=12)
plot(totacc.ts)
plot(unem.ts)
plot(fatacc.ts)
# Seasonal decomposition
fit_01 = stl(totacc.ts, s.window="period")
fit_02 = stl(fatacc.ts, s.window="period")
fit_03 = stl(unem.ts, s.window="period")
plot(fit)
monthplot(totacc)
library(forecast)
seasonplot(totacc.ts)
#Ajuste pela Tendência
mr_02 = lm(totacc.ts ~ fatacc.ts + unem.ts)
summary(mr_02)
mr_03 = lm(totacc.ts ~ fatacc.ts + unem.ts + t)
summary(mr_03)
#Ajuste pela Tendência e Sazonalidade
mr_04 = lm(totacc.ts ~ fatacc.ts + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec)
summary(mr_04)
# Efeito da spdlaw =1 after 65 mph in effect
mr_05 = lm(totacc.ts ~ fatacc.ts + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + spdlaw)
summary(mr_05)
# Efeito da beltlaw =1 after seatbelt law
mr_06 = lm(totacc.ts ~ fatacc.ts + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + beltlaw)
summary(mr_06)
# Efeito da wkends;  weekends in month
mr_07 = lm(totacc.ts ~ fatacc.ts + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + wkends)
summary(mr_07)
# Modelo com 2 lags
mr_08 = dynlm(totacc.ts ~ L(fatacc.ts,1) + L(unem.ts,2)
+ t  + feb + mar + apr + may + jun + jul + aug + sep + oct + nov + dec + wkends)
summary(mr_08)
#EXTRA_1 add log: log(totacc) em uma tendência de tempo linear e 11 variáveis fictícias mensais,
#           usando janeiro como mês base
mr_10 = dynlm(log(totacc.ts) ~ t  + feb + mar + apr + may + jun + jul + aug + sep + oct + nov + dec)
summary(mr_10)
#EXTRA_2 add log:Adiciononando à regressão anterior as variáveis wkends, unem, spdlaw e beltlaw
mr_11 = dynlm(log(totacc.ts) ~ t + feb + mar + apr + may + jun + jul + aug + sep + oct + nov + dec +
wkends + unem + spdlaw + beltlaw)
summary(mr_11)
res = cor(totacc, fatacc, t, unem)
round(res, 2)
install.packages("pastecs")
library(pastecs)
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
freq(dt, nmax = 5, header = TRUE)
frequency(dt, nmax = 5, header = TRUE)
frequency(dt)
# # get age distribution of unique patients
freq(dt, sort.count = FALSE)
# # get age distribution of unique patients
frequency(dt, sort.count = FALSE)
frequency(totacc, sort.count = FALSE)
frequency(totacc.ts, sort.count = FALSE)
dim(dt)
frequency(year,totacc,fatacc,t,unem,spdlaw,beltlaw,wkends, sort.count = FALSE)
frequency(year,totacc.ts,fatacc.ts,t,unem.ts,spdlaw,beltlaw,wkends)
scores = cbind (dt)
stat.desc(scores)
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
#statisticas descritivas
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
table(dt)
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
head (dt)
attach(dt)
install.packages("pastecs")
library(pastecs)
install.packages("pastecs")
getwd(
getwd()  #retorna a pasta diretório
getwd()
getwd()
head (dt)
attach(dt)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
table(dt)
table_1 = table(year , totacc, fatacc, t, unem, spdlaw, beltlaw, wkends)
table_1 = table(dt$year , dt$totacc, dt$fatacc, dt$t, dt$unem, dt$spdlaw, dt$beltlaw, dt$wkends)
table_1 = table(dt$'year' , dt$'totacc', dt$'fatacc', dt$'t', dt$'unem', dt$'spdlaw', dt$'beltlaw', dt$'wkends')
table_1 = table(dt$'year' , dt$'totacc', dt$'fatacc', dt$'t', dt$'unem', dt$'wkends')
table_1 = table(dt$'totacc', dt$'fatacc', dt$'t', dt$'unem', dt$'wkends')
ftable(table_1)
table_1 = table(dt$'totacc', dt$'fatacc', dt$'t', dt$'unem', dt$'wkends')
ftable(table_1)
ftable(table_1)
table_1 = table(dt$'totacc', dt$'fatacc', dt$'t', dt$'unem')
ftable(table_1)
install.packages("pastecs")
library(pastecs)
install.packages("pastecs")
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
head (dt)
attach(dt)
getwd()  #retorna a pasta diretório
ggplot(dt, aes(x = `anos`)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("ggplot2")
library(ggplot2)
ggplot(dt, aes(x = `anos`)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dt$year, aes(x = `year`)) + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dt$year, aes(x = 'year')) + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dt, aes(x = 'year')) + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dt, aes(x = 'year', y = 'totacc')) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dt, aes(x = year, y = totacc)) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dt, aes(x = year, y = totacc)) + geom_bar())
ggplot(dt) +
geom_point(aes(x = years, y = totacc))
ggplot(dt) +
geom_point(aes(x = 'years', y = totacc))
dt %>%
filter(classificacao %in% c("years", "totacc")) %>%
ggplot() +
geom_point(aes(x = years, y = totacc)) +
facet_wrap(~classificacao, nrow = 2)
library(summarytools)
install.packages("summarytools")
library(summarytools)
summarytools::descr(dt)
summarytools(descr(dt))
dfSummary (dt)
dfsummary (dt)
summarytools::descr(dt)
install.packages("summarytools")
library(summarytools)
summarytools::descr(dt)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(summarytools)
getwd()
getwd()
install.packages("summarytools")
install.packages("dplyr")
install.packages("summarytools")
library(dplyr)
library(summarytools)
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
summarytools::descr(dt)
mydata = summarytools :: descr (dt)
View (mydata)
dfSummary(dt)
install.packages("Hmisc")
library(Hmisc)
Hmisc::describe(dt)
freq(dt, report.nas = FALSE, style = "rmarkdown", headings = FALSE)
freq_dt = freq(dt, report.nas = FALSE, style = "rmarkdown", headings = FALSE)
freq_dt =
freq(dt, report.nas = FALSE, style = "rmarkdown", headings = FALSE)
print(dfSummary(dt, valid.col = FALSE, graph.magnif = 0.75),
max.tbl.height = 300, method = "render")
dfSummary(dt, plain.ascii = FALSE, style = "grid",
graph.magnif = 0.75, valid.col = FALSE, tmp.img.dir = "/tmp")
print(dfsummary(dt, valid.col = FALSE, graph.magnif = 0.75),
max.tbl.height = 300, method = "render")
dfSummary(dt, plain.ascii = FALSE, style = "grid",
graph.magnif = 0.75, valid.col = TRUE, tmp.img.dir = "/tmp")
dfSummary(dt, plain.ascii = FALSE, style = "grid",
graph.magnif = 0.95, valid.col = FALSE, tmp.img.dir = "/tmp")
install.packages("corrplot")
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res = cor(totacc, fatacc, t, unem)
round(res, 2)
res = cor(totacc, fatacc, t, unem)
round(res, 2)
install.packages("pastecs")
install.packages("summarytools")
install.packages("dplyr")
library(dplyr)
library(summarytools)
library(pastecs)
install.packages("summarytools")
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
install.packages("pastecs")
install.packages("summarytools")
install.packages("dplyr")
library(dplyr)
library(summarytools)
library(pastecs)
install.packages("dplyr")
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
scores = cbind (totacc, fatacc, t, unem)
stat.desc(scores)
options(scipen=100)
options(digits=2)
stat.desc(scores)
stat.desc(scores, basic=F)
res = cor(totacc, fatacc, t, unem)
round(res, 2)
#matrix de correlação
res = cor.test(totacc, fatacc, t, unem)
#matrix de correlação
res = cor(totacc, fatacc, t, unem)
scores = cbind (totacc, fatacc, t, unem)
#matrix de correlação
res = cor(totacc, fatacc, t, unem)
#matrix de correlação
res = cor(totacc, fatacc, t, unem)
round(res, 2)
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
dt = read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
mr_05 = lm(log(totacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + spdlaw)
summary(mr_05)
mr_05 = lm(log(totacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + spdlaw)
summary(mr_05)
mr_06 = lm(log(totacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + beltlaw)
summary(mr_06)
dt= read.csv("traffic2.csv", sep = ";", header = T)
head (dt)
attach(dt)
totacc.ts = ts(totacc,start=c(1981,1),end=c(1989,12),frequency=12)
fatacc.ts = ts(fatacc,start=c(1981,1),end=c(1989,12),frequency=12)
unem.ts = ts(unem,start=c(1981,1),end=c(1989,12),frequency=12)
# Efeito da spdlaw =1 after 65 mph in effect
mr_05 = lm(log(totacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + spdlaw)
summary(mr_05)
# Efeito da beltlaw =1 after seatbelt law
mr_06 = lm(log(totacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + beltlaw)
summary(mr_06)
# Efeito da wkends;  weekends in month
mr_07 = lm(log(totacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + wkends)
summary(mr_07)
# Efeito da spdlaw =1 after 65 mph in effect
mr_20 = lm(log(fatacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + totacc)
summary(mr_20)
# Efeito da beltlaw =1 after seatbelt law
mr_21 = lm(log(fatacc.ts) ~ unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + beltlaw)
summary(mr_21)
# Efeito da wkends;  weekends in month
mr_22 = lm(log(fatacc.ts) ~ spdlaw + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + wkends)
summary(mr_22)
# Efeito da spdlaw =1 after 65 mph in effect
mr_30 = lm(log(unem.ts) ~ fatacc.ts + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + totacc)
summary(mr_30)
# Efeito da beltlaw =1 after seatbelt law
mr_31 = lm(log(unem.ts) ~ fatacc.ts + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + beltlaw)
summary(mr_31)
# Efeito da wkends;  weekends in month
mr_32 = lm(log(unem.ts) ~ fatacc.ts + unem.ts + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec + wkends)
summary(mr_32)
mr_05 = lm(log(totacc.ts) ~ unem.ts + spdlaw +beltlaw + wkends + t + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec)
summary(mr_05)
mr_06 = lm(log(fatacc.ts) ~ unem.ts + spdlaw + beltlaw + wkends + t  + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec)
summary(mr_06)
mr_07 = lm(log(unem.ts) ~ fatacc.ts + spdlaw + beltlaw + wkends + t + feb + mar +
apr + may + jun + jul + aug + sep + oct + nov + dec)
summary(mr_07)
install.packages("pastecs")
library(pastecs)
install.packages("plm")
library(plm)
install.packages("lfe")
library(lfe)
install.packages("ggplot2")
library(ggplot2)
getwd()
#{Dados em painel
dtpd = read.csv("driving.csv", sep = ";", header = T)
pdata = pdata.frame(dtpd, index=c("state","year"))
attach(pdata)
Y = cbind(totfatrte)
X = cbind(log(vehicmiles), log(unem), log(perc14_24))
P = cbind(bac10, bac08, sl70plus, sbprim, sbsecon)
l_dummy = cbind(d81, d82, d83, d84, d85, d86, d87, d88, d89, d90, d91, d92, d93, d94,
d95, d96, d97, d98, d99, d00, d01, d02, d03, d04)
# Pooled OLS estimator
plm_pooling = plm(log(Y) ~ X + l_dummy, data=pdata, model= "pooling")
summary(plm_pooling)
# Fixed effects ou within estimator
plm_fixed = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24,
data=pdata, index=c("state", "year"), model= "within")
summary(plm_fixed)
# Random effects estimator
plm_random = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24,
data=pdata, index=c("state", "year"), model="random")
summary(plm_random)
# Between estimator
plm_between = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24 + P,
data=pdata, index=c("state", "year"), model= "within", effect="twoways")
summary(plm_between)
# First differences estimator
plm_firstdiff = plm(log(Y) ~ X + l_dummy, data=pdata, model= "fd")
summary(plm_firstdiff)
plmtest(plm_pooling, effect="individual", type="bp")
plmtest(plm_pooling, type="bp")
#Normalidade dos resíduos
residuos = plm_random$residuals
hist(residuos,col="orange",main="Histograma dos resíduos")
shapiro.test(residuos)$p.value
#Homocedasticidade dos resíduos
library(lmtest)
bptest(plm_random)$p.value
residuos = plm_random$residuals
hist(residuos,col="blue",main="Histograma dos resíduos")
shapiro.test(residuos)$p.value
plm_fixed = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24,
data=pdata, index=c("state", "year"), model= "within")
summary(plm_fixed)
did_1 = felm(log(Y) ~ X | state + year | 0 | n)
summary(did_1, robust = TRUE)
did2 = felm(log(Y) ~ X + P | state + year | 0 | n)
summary(did2, robust = TRUE)
library(gplots)
MQO = lm(Y ~ X, data = pdata)
summary(MQO)
y_chapeu = MQO$fitted
ggplot(pdata, aes(x = x1, y = y))+
geom_point() +
geom_smooth(method=lm)
y_chapeu = MQO$fitted
ggplot(pdata, aes(x = X, y = Y))+
geom_point() +
geom_smooth(method=lm)
Y_chapeu = MQO$fitted
ggplot(pdata, aes(x = X, y = Y))+ geom_point() + geom_smooth(method=lm)
ggplot(pdata, aes(x = X, y = log(vehicmiles)))+ geom_point() + geom_smooth(method=lm)
ggplot(pdata, aes(x = X, y = log(vehicmiles))+ geom_point() + geom_smooth(method=lm)
ggplot(pdata, aes(x = X, y = log(vehicmiles)+ geom_point() + geom_smooth(method=lm)
yhat = plm_fixed$fitted
scatterplot(yhat ~ pdata$X | pdata$state,  xlab ="X", ylab ="yhat", boxplots = FALSE,smooth = FALSE)
install.packages("gplots")
install.packages("gplots")
library(gplots)
scatterplot(yhat ~ pdata$X | pdata$state,  xlab ="X", ylab ="yhat", boxplots = FALSE,smooth = FALSE)
ggplot(yhat ~ pdata$X | pdata$state,  xlab ="X", ylab ="yhat", boxplots = FALSE,smooth = FALSE)
graph = ggplot(yhat ~ pdata$X | pdata$state,  xlab ="X", ylab ="yhat", boxplots = FALSE,smooth = FALSE)
graph = ggplot(yhat ~ pdata$log(vehicmiles) | pdata$state,  xlab ="X", ylab ="yhat", boxplots = FALSE,smooth = FALSE)
fixed.time = plm(Y ~ X + factor(year), data=pdata, model="within")
fixed.time = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24,
data=pdata, index=c("year"), model= "within")
summary(fixed.time)
fixed.time = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24 + factor("year"),
data=pdata, index=c("state", "year"), model= "within")
fixed.time = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24 + factor("year"),
data=pdata, model= "within")
fixed.time = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24 + factor(year),
data=pdata, model= "within")
summary(fixed.time)
plmtest(plm_pooling, type=c("bp"))
install.packages("doBy")
library(doBy)
summaryBy(testscr ~ totfatrte, data=pdata,
FUN=c(mean, min, max), na.rm=TRUE)
summaryBy(Y ~ X, data=pdata,
FUN=c(mean, min, max), na.rm=TRUE)
summaryBy(Y ~ year, data=pdata,
FUN=c(mean, min, max), na.rm=TRUE)
summaryBy(Y ~ year, data=pdata,
FUN=c(mean, var, std.dev), na.rm=TRUE)
summaryBy(Y ~ year, data=pdata,
FUN=c(mean, var, sd), na.rm=TRUE)
# Estatisticas Descritivas - Generalizando para todos os anos
summaryBy(cbind(totfatrte, vehicmiles, unem, perc14_24) ~ year, data=pdata,
FUN=c(mean, var, sd), na.rm=TRUE)
# Estatisticas Descritivas - Generalizando para todos os anos
summaryBy(cbind(totfatrte, nghtfatrte, wkndfatrte, vehicmiles, unem, perc14_24) ~ year, data=pdata,
FUN=c(mean, var, sd), na.rm=TRUE)
plm_pooling = plm(log(Y) ~ X + l_dummy, data=pdata, model= "pooling")
summary(plm_pooling)
plm_fixed = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24,
data=pdata, index=c("state", "year"), model= "within")
summary(plm_fixed)
#Reg Random effects
plm_random = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24,
data=pdata, index=c("state", "year"), model="random")
summary(plm_random)
plm_between = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24 + P,
data=pdata, index=c("state", "year"), model= "within", effect="twoways")
summary(plm_between)
#Reg First differences
plm_firstdiff = plm(log(Y) ~ X + l_dummy, data=pdata, model= "fd")
summary(plm_firstdiff)
#Reg Time-fixed effects
fixed.time = plm(log(totfatrte) ~ vehicmiles + unem + perc14_24 + factor(year),
data=pdata, model= "within")
summary(fixed.time)
# LM test for fixed effects
plmtest(plm_fixed, effect="time", type="bp")
# LM test for fixed effects and MQO
pFtest(plm_fixed, plm_pooling)
# Test between MQO and random effects (não quer rodar!)
plmtest(plm_pooling, type="bp")
# Hausman test for fixed versus random effects model
phtest(plm_random, plm_fixed)
# LM test for fixed effects
plmtest(plm_fixed, effect="time", type="bp")
# Test for serial correlation
pbgtest(plm_random)
pbgtest(plm_pooling)
# Test for serial correlation
pbgtest(plm_random)
residuos = plm_random$residuals
hist(residuos,col="blue",main="Histograma dos resíduos")
shapiro.test(residuos)$p.value
library(lmtest)
bptest(plm_random)$p.value
library(pastecs)
